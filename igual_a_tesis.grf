# Meter exactamente las mismas regulaciones que en la tesis

# -------------------------- Name and order of genes ------------------------- #
genes = {A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T}


# -------------------------------- Regulations ------------------------------- #
# Reglas lógicas igual a la tesis: 
update-rules = {A<-(A & ~D),B<-(A & ~H),C<-((B | A) & ~H),D<-((C|B) & ~(H | S)),E<-(B & ~H),F<-((E | B | N | J) & ~(I | H)),G<-((F | N) & ~(Q | J)),H<-(((F & ~A) | L) & ~S),I<-((H | F | ~A) & ~(B | O | J | C)),J<-((L | Q) & ~(F | N)),K<-(K & ~L),L<-((K | P) & ~H),M<-(M & ~N),N<-(M),O<-(F & ~J),P<-(L & ~(F | J | P)),Q<-(J & ~S),R<-(F & ~(P | T | D)),S<-(((R & A) | S) & ~D),T<-((J | ~(E | G)) & ~S)}

# All regulations as mandatory, unambiguous:
# Ya revisadas en una_por_una.grf (aunque no parece que hubieran cambios)
interactions = {MPU[A:A][A:B][A:C][A:S][B:C][B:D][B:E][B:F][C:D][E:F][F:G][F:H][F:I][F:O][F:R][H:I][J:F][J:Q][J:T][K:K][K:L][L:H][L:J][L:P][M:M][M:N][N:F][N:G][P:L][Q:J][R:S][S:S], MNU[A:H][A:I][B:I][C:I][D:A][D:R][D:S][E:T][F:J][F:P][G:T][H:B][H:C][H:D][H:E][H:F][H:L][I:F][J:G][J:I][J:O][J:P][L:K][N:J][N:M][O:I][P:P][P:R][Q:G][S:D][S:H][S:Q][S:T][T:R]}

# ----------------------------- Set of attractors ---------------------------- #
# ----------------- Guardados en Spreadsheet Búsqueda radial ----------------- #
# Figura 17 - A=1 (Atractores: arresto 1 y apoptosis 1)
# fixed-points(A)={11111110000000100000,11101110000000100110}
# Attrs obtenidos en WT en Boolnet:
# fixed-points()={00000000100000000001,11101110000000100110,00000000100000000010}
# cycles={00000000110000000001,00000000000000001001}
# cycles={00000000000100000010,00000000110000010010}


# ---------------------------------- Options --------------------------------- #
allow.ambiguity = false             # toda regulación tiene únicamente un signo posible
allow.additional.states = true     # generar el conjunto exacto de estados indicados para cada situación
allow.additional.cycles = true     # permitir o no cAos extra (además de los que se hayan definido en cycles() )
allow.hypotheses = false            # activar las regulaciones hipotéticas indicadas arriba
block.steady.a.posteriori = false   # método de bloquear estados no deseados
divide.query.by.topology = false    # análisis radial
# topology.iterator.type = radial   # análisis radial
# topological.distance.radius = 4   # radio máximo de búsqueda
# limit.boolean.networks = 1        # limitar la búsqueda hasta haber encontrado cierto número de redes posibles